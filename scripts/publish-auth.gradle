def usePropertiesFromEnvironment() {
    // Use system environment variables
    rootProject.ext["ossrhToken"] = System.getenv('OSSRH_TOKEN') ?: ""
    rootProject.ext["ossrhTokenPassword"] = System.getenv('OSSRH_TOKEN_PASSWORD') ?: ""
    rootProject.ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: ""
    rootProject.ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ""
    rootProject.ext["signing.password"] = System.getenv('SIGNING_PASSWORD') ?: ""
    rootProject.ext["signing.key"] = System.getenv('SIGNING_KEY') ?: ""
    rootProject.ext["snapshot"] = System.getenv('SNAPSHOT') ?: ""
    rootProject.ext["rootVersionName"] = '0.1.2'
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }

    if (!p.containsKey("ossrhToken")) {
        usePropertiesFromEnvironment()
    }
} else {
    usePropertiesFromEnvironment()
}

// Set up Sonatype repository

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhToken
            password = ossrhTokenPassword

            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

tasks.withType(dokkaHtmlMultiModule.getClass()) {
    includes.from("DokkaRoot.md")
}